shell /opt/homebrew/bin/fish --interactive --login
#: Font config

font_family      JetBrainsMonoNL Nerd Font Mono
bold_font        JetBrainsMonoNL Nerd Font Mono Bold
italic_font      JetBrainsMonoNL Nerd Font Mono Light Italic
bold_italic_font JetBrainsMonoNL Nerd Font Mono Bold Italic
font_size 13.0

# Cursor customization

cursor_blink_interval 0

# Scrollback 

scrollback_lines 2000

# Performance tuning

# Window layout

remember_window_size  yes
initial_window_width  800
initial_window_height 500

window_resize_step_cells 2
window_resize_step_lines 2

window_padding_width 1 5

# Tab bar

tab_bar_edge bottom

tab_bar_style powerline

tab_bar_align left

# tab_bar_min_tabs 2
tab_powerline_style angled

#: The powerline separator style between tabs in the tab bar when
#: using powerline as the tab_bar_style, can be one of: angled,
#: slanted, round.

tab_title_template "{fmt.fg.red}{bell_symbol}{activity_symbol}{fmt.fg.tab}{sup.index}:{title}"

background_opacity 0.9

#: How much to dim text that has the DIM/FAINT attribute set. One
#: means no dimming and zero means fully dimmed (i.e. invisible).

# Advanced

editor /opt/homebrew/bin/nvim

# OS specific tweaks

#: Have kitty quit when all the top-level windows are closed on macOS.
#: By default, kitty will stay running, even with no open windows, as
#: is the expected behavior on macOS.
macos_quit_when_last_window_closed yes


#: Use the macOS traditional full-screen transition, that is faster,
#: but less pretty.
macos_traditional_fullscreen yes

# Treat option as alt
macos_option_as_alt yes

# BEGIN_KITTY_THEME
# Everforest Dark Medium
include current-theme.conf
# END_KITTY_THEME

# Open new tab in CWD
map cmd+shift+t new_tab_with_cwd

# Conditional mappings for when in (Neo)vim
map --when-focus-on var:in_editor cmd+n
map --when-focus-on var:in_editor cmd+p
map --when-focus-on var:in_editor cmd+w
map --when-focus-on var:in_editor cmd+enter
map --when-focus-on var:in_editor cmd+h
map --when-focus-on var:in_editor cmd+j
map --when-focus-on var:in_editor cmd+k
map --when-focus-on var:in_editor cmd+l
map --when-focus-on var:in_editor cmd+;
map --when-focus-on var:in_editor cmd+b
map --when-focus-on var:in_editor cmd+f
map --when-focus-on var:in_editor cmd+r
map --when-focus-on var:in_editor cmd+q
map --when-focus-on var:in_editor cmd+c
